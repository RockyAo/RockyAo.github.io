{"title":"ECMAScript6简介","slug":"ECMAScript6简介","url":"http://share.ra.com/ECMAScript6简介","date":"2016-09-08T09:17:00.000Z","updated":"2017-03-22T02:16:37.000Z","comments":true,"excerpt":"","tags":["JavaScript"],"content":"<h4 id=\"ECMAScript和JavaScript的关系\"><a href=\"#ECMAScript和JavaScript的关系\" class=\"headerlink\" title=\"ECMAScript和JavaScript的关系\"></a>ECMAScript和JavaScript的关系</h4><p>ECMAScript6是JavaScript语言的下一代标准，2015年6月正式发布。Mozilla公司将在这个标准的基础上，推出JavaScript2.0</p>\n<p>ECMAScript是JavaScript语言的国际标准，而JavaScript是ECMAScript的实现</p>\n<h4 id=\"浏览器兼容\"><a href=\"#浏览器兼容\" class=\"headerlink\" title=\"浏览器兼容\"></a>浏览器兼容</h4><p><a href=\"https://github.com/paulmillr/es6-shim\" target=\"_blank\" rel=\"external\">https://github.com/paulmillr/es6-shim</a></p>\n<h1 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h1><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>ES6新增了let命令，用来声明变量。用法类似于var，但所生命的变量，只在let命令所在的代码块内有效</p>\n<h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><p>let不像var那样会存在变量提升</p>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>只要块级作用域内存在let命令，它所生命的变量就’绑定’（binding）这个区域，不在受外部影响</p>\n<h3 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h3><p>let不允许在相同作用域内，重复声明同一个变量</p>\n<h1 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h1><p>const也用来声明常量，一旦声明常量的值不可改变。</p>\n<h1 id=\"跨模块常量\"><a href=\"#跨模块常量\" class=\"headerlink\" title=\"跨模块常量\"></a>跨模块常量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//module.js</div><div class=\"line\">export const variantName = &apos;Lily&apos;;</div><div class=\"line\">export const floatcount = 3.1.4</div><div class=\"line\">//use.js</div><div class=\"line\">\t </div><div class=\"line\">//导入全部</div><div class=\"line\">import * as var variant from &apos;./module&apos;;</div><div class=\"line\">console.log(variant.variantName);</div><div class=\"line\">\t </div><div class=\"line\">//导入某一个</div><div class=\"line\">import variantName as variant from &apos;./module&apos;;</div><div class=\"line\">\t </div><div class=\"line\">//导入某几个</div><div class=\"line\">import &#123; variantName , floatcount&#125; as variant from &apos;./module&apos;</div></pre></td></tr></table></figure>\n<h1 id=\"全局对象属性\"><a href=\"#全局对象属性\" class=\"headerlink\" title=\"全局对象属性\"></a>全局对象属性</h1><p>全局对象是最顶层的对象，在浏览器环境指的是window对象，在Node.js指的是global对象。在JavaScript语言中，所有全局变量都是全局对象的属性。（Node的情况比较特，这一条只对REPL环境适用，模块环境必须显式生命global属性）</p>\n<p>ES6规定，var命令和function命令声明的全局变量，属于全局对象的属性；let命令、const命令、class命令声明的全局变量，不属于全局对象的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &apos;test&apos;;</div><div class=\"line\">//浏览器环境下</div><div class=\"line\">console.log(window.name); //输出 name</div><div class=\"line\">\t</div><div class=\"line\">//node.js环境下</div><div class=\"line\">console.log(global.name); //输出 name</div><div class=\"line\">\t</div><div class=\"line\">//通用环境下</div><div class=\"line\">console.log(this.name); //输出 name</div></pre></td></tr></table></figure>","prev":{"title":"ECMAScript6变量的解构赋值","slug":"ECMAScript6变量的解构赋值"}}