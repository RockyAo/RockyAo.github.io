{"title":"RxSwift（一）Creating and Subscribing to Observables 创建和订阅观察者","slug":"RxSwift（一）Creating and Subscribing to Observables 创建和订阅观察者","url":"http://share.ra.com/RxSwift（一）Creating and Subscribing to Observables 创建和订阅观察者","date":"2017-03-22T01:47:37.000Z","updated":"2017-03-22T06:27:06.000Z","comments":true,"excerpt":"","tags":["Swift","RxSwift"],"content":"<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><p>在ReactiveX中，一个观察者(Observer)订阅一个可观察对象(Observable)。观察者对 Observable发射的数据或数据序列作出响应。这种模式可以极大地简化并发操作，因为它创建了一个处于待命状态的观察者哨兵，在未来某个时刻响应Observable的通知，不需要阻塞 等待Observable发射数据。</p>\n<p><img src=\"http://reactivex.io/assets/operators/legend.png\" alt=\"Observable\" title=\"Observable\"></p>\n<h2 id=\"初始化playground\"><a href=\"#初始化playground\" class=\"headerlink\" title=\"初始化playground\"></a>初始化playground</h2><ul>\n<li>初始化项目工程，pod引入RxSwift</li>\n<li>创建playground</li>\n<li>在playground\\Sources下创建 support.swift文件 填写下面代码</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">exampleOf</span><span class=\"params\">(description:String, action:  @escaping <span class=\"params\">()</span></span></span>-&gt;<span class=\"type\">Void</span>)  &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\n------exampleOf:<span class=\"subst\">\\(description)</span>------\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    action()</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> PlaygroundSupport</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">playgroundShouldContinueIndefinitely</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"type\">PlaygroundPage</span>.current.needsIndefiniteExecution = <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>在playground中导入RxSwift,RxCocoa</li>\n</ul>\n<h2 id=\"never\"><a href=\"#never\" class=\"headerlink\" title=\"never\"></a>never</h2><p>创建一个不发射任何数据的Observable</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">exampleOf(description:<span class=\"string\">\"never\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> neverSequence = <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.never()</div><div class=\"line\">    </div><div class=\"line\">    neverSequence.subscribe&#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></div><div class=\"line\">    </div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"永远不会执行\"</span>)</div><div class=\"line\">        </div><div class=\"line\">    &#125;.disposed(by: disposeBag)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h2><p>创建一个什么都不做直接通知完成的Observable.它只发送 .Completed 消息。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"empty\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</div><div class=\"line\">        .subscribe&#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">            </div><div class=\"line\">    &#125;.disposed(by: <span class=\"type\">DisposeBag</span>())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"just\"><a href=\"#just\" class=\"headerlink\" title=\"just:\"></a>just:</h2><p>将一个或多个对象转换成发射这个或这些对象的一个Observable,just 是只包含一个元素的序列，它会先发送 .Next(value) ，然后发送 .Completed 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"just\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"type\">Observable</span>.just(<span class=\"string\">\"我是对象\"</span>)</div><div class=\"line\">        .subscribe&#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            </div><div class=\"line\">    </div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;.addDisposableTo(<span class=\"type\">DisposeBag</span>())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"of\"><a href=\"#of\" class=\"headerlink\" title=\"of\"></a>of</h2><p>可以把一系列元素转换成事件序列</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"of\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">    .subscribe(onNext: &#123; (event) <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;, onError: &#123; (error) <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(error)</div><div class=\"line\">    &#125;, onCompleted: &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"信号完成\"</span>)</div><div class=\"line\">    &#125;, onDisposed: &#123; </div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"信号序列释放\"</span>)</div><div class=\"line\">    &#125;).disposed(by: <span class=\"type\">DisposeBag</span>())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h2><p>from 是通过 asObservable() 方法把 Swift 中的序列 (SequenceType) 转换成事件序列。例如:将一个数组转换成一个Observable</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"from\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"type\">Observable</span>.from([<span class=\"string\">\"lily\"</span>,<span class=\"string\">\"lilei\"</span>,<span class=\"string\">\"sb\"</span>])</div><div class=\"line\">    .subscribe(onNext: &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        </div><div class=\"line\">    &#125;).disposed(by: <span class=\"type\">DisposeBag</span>())</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h2><p>使用一个函数闭包从头创建一个Observable,通过 .on(e: Event) 添加事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"create\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> myJust = &#123; (element:<span class=\"type\">String</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create&#123; observable <span class=\"keyword\">in</span></div><div class=\"line\">            </div><div class=\"line\">            observable.on(.next(element))</div><div class=\"line\">            </div><div class=\"line\">            observable.on(.completed)</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    myJust(<span class=\"string\">\"🍎\"</span>)</div><div class=\"line\">        .subscribe&#123;</div><div class=\"line\">    </div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;.disposed(by: <span class=\"type\">DisposeBag</span>())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h2><p>创建一个发射特定整数序列的Observable</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"range\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>,<span class=\"built_in\">count</span>:<span class=\"number\">10</span>)</div><div class=\"line\">        .subscribe&#123;</div><div class=\"line\">    </div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;.disposed(by: <span class=\"type\">DisposeBag</span>())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"repeatElement\"><a href=\"#repeatElement\" class=\"headerlink\" title=\"repeatElement\"></a>repeatElement</h2><p>创建一个重复发射指定数据或数据序列的Observable，</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"repeatElement\"</span> )&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"type\">Observable</span>.repeatElement(<span class=\"string\">\"🐩\"</span>)</div><div class=\"line\">        .take(<span class=\"number\">3</span>)<span class=\"comment\">//只发射3次</span></div><div class=\"line\">        .subscribe&#123;<span class=\"built_in\">print</span>($<span class=\"number\">0</span>)&#125;</div><div class=\"line\">        .disposed(by: <span class=\"type\">DisposeBag</span>())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><p>发射所有条件为真的值的响应序列</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"generate\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"type\">Observable</span>.generate(initialState: <span class=\"number\">0</span>, condition: &#123; (<span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"type\">T</span> &lt; <span class=\"number\">3</span></div><div class=\"line\">        </div><div class=\"line\">    &#125;, iterate: &#123;  $<span class=\"number\">0</span> + <span class=\"number\">1</span>&#125;)</div><div class=\"line\">        .subscribe&#123;</div><div class=\"line\">    </div><div class=\"line\">          <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;.addDisposableTo(<span class=\"type\">DisposeBag</span>())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"deferred\"><a href=\"#deferred\" class=\"headerlink\" title=\"deferred\"></a>deferred</h2><p>deferred 会等到有订阅者的时候再通过工厂方法创建 Observable 对象，每个订阅者订阅的对象都是内容相同而完全独立的序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"deferred\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">1</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> deferredSequence = <span class=\"type\">Observable</span>.deferred(&#123; () -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"creat---<span class=\"subst\">\\(<span class=\"built_in\">count</span>)</span>\"</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create&#123; observable <span class=\"keyword\">in</span></div><div class=\"line\">        </div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"发射~~~~...\"</span>)</div><div class=\"line\">            observable.onNext(<span class=\"string\">\"🐶\"</span>)</div><div class=\"line\">            observable.onNext(<span class=\"string\">\"🐱\"</span>)</div><div class=\"line\">            observable.onNext(<span class=\"string\">\"🐵\"</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//第一个订阅者</span></div><div class=\"line\">    </div><div class=\"line\">    deferredSequence.subscribe&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"第一个订阅者--------\"</span>)</div><div class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;.disposed(by: disposeBag)</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//第二个订阅者</span></div><div class=\"line\">    deferredSequence.subscribe&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"第二个订阅者\"</span>)</div><div class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;.disposed(by: disposeBag)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"error\"></a>error</h2><p>创建一个什么都不做直接通知错误的Observable</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"error\"</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">testError</span>:<span class=\"title\">Error</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">case</span> bigError</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.error(testError.bigError).subscribe&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"doOn\"><a href=\"#doOn\" class=\"headerlink\" title=\"doOn\"></a>doOn</h2><p>doOn 可以监听事件，并且在事件发生之前调用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">exampleOf(description: <span class=\"string\">\"doOn\"</span>) &#123; </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>).<span class=\"keyword\">do</span>(onNext: &#123; (event) <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;, onError: &#123; (error) <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(error)</div><div class=\"line\">    &#125;, onCompleted: &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"完成\"</span>)</div><div class=\"line\">    &#125;, onSubscribe: &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"订阅\"</span>)</div><div class=\"line\">    &#125;, onDispose: &#123; </div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"释放\"</span>)</div><div class=\"line\">    &#125;).subscribe&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">    &#125;.disposed(by: <span class=\"type\">DisposeBag</span>())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Demo地址<a href=\"https://github.com/RockyAo/RxSwift_learn\" target=\"_blank\" rel=\"external\">https://github.com/RockyAo/RxSwift_learn</a>.或者直接看官方的demo</li>\n</ul>\n","prev":{"title":"RxSwift (二) Working with Subjects","slug":"RxSwift (二) Working with Subjects"},"next":{"title":"iOS开发-自定义相机入门","slug":"iOS开发-自定义相机入门"}}